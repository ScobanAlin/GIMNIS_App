import "dotenv/config";
import { Pool, QueryResult } from "pg";

const ssl = process.env.PGSSLMODE === "require" ? { rejectUnauthorized: false } : undefined;

const pool = new Pool(
  process.env.DATABASE_URL
    ? { connectionString: process.env.DATABASE_URL, ssl }
    : {
        host: process.env.PGHOST || "127.0.0.1",
        port: Number(process.env.PGPORT || 5432),
        database: process.env.PGDATABASE,
        user: process.env.PGUSER,
        password: process.env.PGPASSWORD,
        ssl,
      }
);

export const createTables = async () => {
  const query = `
  -- Competitors
  CREATE TABLE IF NOT EXISTS competitor (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100) NOT NULL,
    email       VARCHAR(255) UNIQUE NOT NULL,
    category    VARCHAR(100) NOT NULL,
    age         INT NOT NULL CHECK (age >= 0),
    club        VARCHAR(100) NOT NULL
  );

  -- Judges
  CREATE TABLE IF NOT EXISTS judge (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    first_name  VARCHAR(100) NOT NULL,
    last_name   VARCHAR(100) NOT NULL,
    type        VARCHAR(50)  NOT NULL
  );

  -- Scores
  CREATE TABLE IF NOT EXISTS score (
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    competitor_id  BIGINT NOT NULL REFERENCES competitor(id) ON DELETE CASCADE,
    judge_id       BIGINT NOT NULL REFERENCES judge(id) ON DELETE CASCADE,
    value          INT    NOT NULL CHECK (value BETWEEN 0 AND 10),
    CONSTRAINT uq_score UNIQUE (competitor_id, judge_id)  -- one score per judge per competitor
  );
  `;

  await pool.query(query);
};

createTables();

module.exports = pool;